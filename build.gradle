/* 
 * Dataset maven coordinates
 */
ext.title = 'Provenance Vocabularies'
description = 'Provenance vocabularies from http://www.w3.org/ns/prov'
group ='io.opencaesar.ontologies'
version = '2.0.4'

/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
	  mavenLocal()
    mavenCentral()
	}
	dependencies {
		// https://github.com/opencaesar/owl-adapter/tags
		classpath 'io.opencaesar.adapters:oml2owl-gradle:1.0.+'
		
		// https://github.com/opencaesar/oml-tools/tags
        classpath 'io.opencaesar.oml:oml-merge-gradle:1.1.+'
		classpath 'io.opencaesar.oml:oml-bikeshed-gradle:1.1.+'
		
		// https://github.com/opencaesar/owl-tools/tags
		classpath 'io.opencaesar.owl:owl-load-gradle:+'
		classpath 'io.opencaesar.owl:owl-reason-gradle:+'
		classpath 'io.opencaesar.owl:owl-fuseki:+'
		classpath 'io.opencaesar.owl:owl-fuseki-gradle:+'
		classpath 'io.opencaesar.owl:owl-query-gradle:+'
	}
}

apply from: "${rootDir}/gradle/maven-deployment.gradle"

// Dataset-specific variables
ext.dataset = [
    // Name of dataset (matches one used in .fuseki.ttl file)
    name: 'provenance-vocabularies',
    // URL for publishing dataset documentation
    publishUrl: 'https://opencaesar.github.io/provenance-vocabularies',
    // Bikeshed build folder
    bikeshed: 'build/bikeshed'
]

/*
 * The repositories to look up OML dependencies in
 */
repositories {
	mavenLocal()
	mavenCentral()
}

/*
 * The configuration of OML dependencies
 */
configurations {
	oml
}

/*
 * Dependency versions
 */
ext.coreVersion = '3.+'

/*
 * The OML dependencies
 */
dependencies {
    oml "io.opencaesar.ontologies:core-vocabularies:$coreVersion"
}

/*
 * A task to extract and merge the OML dependencies
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask) {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task omlToBikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask, group:"oml", dependsOn: downloadDependencies) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OML catalog title
    inputCatalogTitle = project.title
    // OML catalog version
    inputCatalogVersion = project.version
     // Input Ontology Iri
    rootOntologyIri = 'http://www.w3.org/ns/prov-bundle'
   // OWL folder
    outputFolderPath = file("$dataset.bikeshed")
    // Publish URL
    publishUrl = "$dataset.publishUrl".toString()
}

/*
 * A task to generate the model documentation in HTML
 */
task generateDocs(type: Exec, dependsOn: omlToBikeshed) {
	inputs.files(fileTree("$dataset.bikeshed").include('**/*.bs'))
	outputs.files(fileTree("$dataset.bikeshed").include('**/*.html'))
	if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
		commandLine "$dataset.bikeshed/publish.bat"
	} else {
		commandLine "$dataset.bikeshed/publish.sh"
	}
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, group:"oml", dependsOn: downloadDependencies) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OWL catalog
    outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonProvenance(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://www.w3.org/ns/prov-bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://www.w3.org/ns/prov-bundle/classes = ALL_SUBCLASS',
		'http://www.w3.org/ns/prov-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://www.w3.org/ns/prov-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/provenance-bundle/reasoning.xml')
}

task owlReasonExamples(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://example.org/examples-bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://example.org/examples-bundle/classes = ALL_SUBCLASS',
		'http://example.org/examples-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://example.org/examples-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/examples-bundle/reasoning.xml')
}

/*
 * A task to build the project, which executes several tasks together
 */
tasks.named('build') {
    group "oml"
    dependsOn owlReasonProvenance
    dependsOn owlReasonExamples
}

/*
 * A task to delete the build artifacts
 */
tasks.named('clean') {
    group "oml"
}

/*
 * Publish artifact to maven
 */
task omlZip(type: Zip, group:"oml") {
    from file('src/main/oml')
    include "**/*.oml"
    destinationDirectory = file('build/libs')
    archiveBaseName = project.name
    archiveVersion = project.version
}

publishing.publications.maven.artifact omlZip

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
    synchronizationTasks downloadDependencies
}