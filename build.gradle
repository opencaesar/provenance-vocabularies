/* 
 * Dataset maven coordinates
 */
ext.title = 'Provenance Vocabularies'
description = 'Provenance vocabularies from http://www.w3.org/ns/prov'
group ='io.opencaesar.ontologies'
version = '4.1.0'

/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
	  mavenLocal()
    mavenCentral()
	}
	dependencies {
		classpath 'io.opencaesar.owl:owl-load-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-reason-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-fuseki:2.+'
		classpath 'io.opencaesar.owl:owl-fuseki-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-query-gradle:2.+'
		classpath 'io.opencaesar.owl:owl-doc-gradle:2.+'
    classpath 'io.opencaesar.oml:oml-merge-gradle:2.+'
		classpath 'io.opencaesar.adapters:oml2owl-gradle:2.+'
	}
}

apply from: "${rootDir}/gradle/maven-deployment.gradle"

// Dataset-specific variables
ext {
    // Name of dataset (matches one used in .fuseki.ttl file)
    dataset = 'provenance-vocabularies'
	// Root Ontology Iri
	rootIri = 'http://www.w3.org/ns/prov-bundle'
}

/*
 * The repositories to look up OML dependencies in
 */
repositories {
	mavenLocal()
	mavenCentral()
}

/*
 * The configuration of OML dependencies
 */
configurations {
	oml
}

/*
 * The OML dependencies
 */
dependencies {
    oml "io.opencaesar.ontologies:core-vocabularies:5.+"
}

/*
 * A task to extract and merge the OML dependencies
 */
task downloadDependencies(type:io.opencaesar.oml.merge.OmlMergeTask) {
    inputZipPaths = configurations.oml.files
    outputCatalogFolder = file('build/oml')
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task omlToOwl(type:io.opencaesar.oml2owl.Oml2OwlTask, group:"oml", dependsOn: downloadDependencies) {
    // OML catalog
    inputCatalogPath = file('catalog.xml')
    // OWL catalog
    outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlReasonProvenance(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
    inputOntologyIri = "$rootIri".toString()
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
        "$rootIri/classes = ALL_SUBCLASS".toString(),
        "$rootIri/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY".toString(),
        "$rootIri/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS".toString()
	]
	// Junit error report
	reportPath = file('build/reports/provenance-bundle/reasoning.xml')
}

task owlReasonExamples(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: omlToOwl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://example.org/examples-bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://example.org/examples-bundle/classes = ALL_SUBCLASS',
		'http://example.org/examples-bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://example.org/examples-bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/examples-bundle/reasoning.xml')
}

/*
 * A task to generate documentation for the OWL catalog
 */
task generateDocs (type: io.opencaesar.owl.doc.OwlDocTask, dependsOn: owlReasonProvenance) {
    // OWL catalog
    inputCatalogPath = file('build/owl/catalog.xml')
    // OWL catalog title
    inputCatalogTitle = project.title
    // OWL catalog version
    inputCatalogVersion = project.version
    // OWL Ontology Iris
    inputOntologyIris = [ "$rootIri/classes", "$rootIri/properties",  "$rootIri/individuals" ]
    // Output folder
    outputFolderPath = file('build/docs')
    // Output case sensitivie path
    outputCaseSensitive = org.gradle.internal.os.OperatingSystem.current().isLinux()
}

/*
 * A task to build the project, which executes several tasks together
 */
tasks.named('build') {
    group "oml"
    dependsOn owlReasonProvenance
    dependsOn owlReasonExamples
}

/*
 * A task to delete the build artifacts
 */
tasks.named('clean') {
    group "oml"
}

/*
 * Publish artifact to maven
 */
task omlZip(type: Zip, group:"oml") {
    from file('src/main/oml')
    include "**/*.oml"
    destinationDirectory = file('build/libs')
    archiveBaseName = project.name
    archiveVersion = project.version
}

publishing.publications.maven.artifact omlZip

/*
 * Integration with the Eclipse IDE
 */ 
apply plugin: 'eclipse'

eclipse {
    synchronizationTasks downloadDependencies
}
