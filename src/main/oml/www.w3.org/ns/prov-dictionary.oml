vocabulary <http://www.w3.org/ns/prov-dictionary> with # as prov-dictionary {

  extends <http://www.w3.org/ns/prov>

  extends <http://www.w3.org/1999/02/22-rdf-syntax-ns>

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#Dictionary"
  @rdfs:label 'Dictionary'
  @rdfs:comment """
  A dictionary is an entity that provides a structure to some constituents, which are themselves entities. These constituents are said to be member of the dictionary.
  This concept allows for the provenance of the dictionary, but also of its constituents to be expressed. Such a notion of dictionary corresponds to a wide variety of concrete data structures, such as a maps or associative arrays.
  A given dictionary forms a given structure for its members. A different structure (obtained either by insertion or removal of members) constitutes a different dictionary.
  """
  concept Dictionary :> prov:Collection

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#hadDictionaryMember"
  @rdfs:label "HadDictionaryMember"
  @rdfs:comment """Describes the key-entity pair that was member of a prov:Dictionary. A dictionary can have multiple members."""
  relation entity HadDictionaryMember [
    from Dictionary
    to KeyEntityPair
    forward hadDictionaryMember
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#EmptyDictionary"
  @rdfs:label "Empty Dictionary"
  @rdfs:comment "An empty dictionary is a dictionary that has no members."
  concept EmptyDictionary :> Dictionary, prov:EmptyCollection [
    restricts relation hadDictionaryMember to exactly 0
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#KeyEntityPair"
  @rdfs:label "Key-Entity Pair"
  @rdfs:comment """A key-entity pair. Part of a prov:Dictionary through prov:hadDictionaryMember. The key is any RDF Literal, the value is a prov:Entity."""
  concept KeyEntityPair [
    restricts scalar property pairKey to exactly 1
    restricts relation pairEntity to exactly 1
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#pairKey"
  @rdfs:label "pairKey"
  @rdfs:comment "The key of a prov:KeyEntityPair, which is an element of a prov:Dictionary."
  scalar property pairKey [
    domain KeyEntityPair
    range rdf:PlainLiteral
    functional
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#pairEntity"
  @rdfs:label "PairEntity"
  @rdfs:comment "The entity of a prov:KeyEntityPair, which is an element of a prov:Dictionary."
  relation entity PairEntity [
    from KeyEntityPair
    to prov:Entity
    @rdfs:label "pairEntity"
    forward pairEntity
    functional
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#derivedByInsertionFrom"
  @rdfs:label "DerivedByInsertionFrom"
  @rdfs:comment """The source dictionary that was derived from the target dictionary by insertion of one or more key-entity pairs."""
  relation entity DerivedByInsertionFrom :> prov:Derivation [
    from Dictionary
    to Dictionary
    @rdfs:label "derivedByInsertionFrom"
    forward derivedByInsertionFrom
    inverse functional
    asymmetric
    irreflexive
    restricts relation insertedKeyEntityPair to min 1
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#insertedKeyEntityPair"
  @rdfs:label "InsertedKeyEntityPair"
  @rdfs:comment """An object property to refer to the prov:KeyEntityPair inserted into a prov:Dictionary."""
  relation entity InsertedKeyEntityPair [
    from DerivedByInsertionFrom
    to KeyEntityPair
    @rdfs:label "insertedKeyEntityPair"
    forward insertedKeyEntityPair
  ]


  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#derivedByRemovalFrom"
  @rdfs:label "DerivedByRemovalFrom"
  @rdfs:comment """The source dictionary that was derived from the target dictionary by removal of one or more keys."""
  relation entity DerivedByRemovalFrom :> prov:Derivation [
    from Dictionary
    to Dictionary
    @rdfs:label "derivedByRemovalFrom"
    forward derivedByRemovalFrom
    inverse functional
    asymmetric
    irreflexive
    restricts scalar property removedKey to min 1
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#removedKey"
  @rdfs:label "removedKey"
  @rdfs:comment """The key removed in a Removal."""
  scalar property removedKey [
    domain DerivedByRemovalFrom
    range rdf:PlainLiteral
    functional
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#dmembership-cmembership-inference"
  @rdfs:comment "IF prov:hadDictionaryMember(d, e1, k1) THEN hadMember(d, e1)"
  @rdfs:label "D1"
  rule directory-membership-collection-membership [
    hadDictionaryMember(d, kp) ^ pairEntity(kp,e) -> prov:hadMember(d, e)
  ]

  @rdfs:seeAlso "https://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/#key-single-entity-inference"
  @rdfs:comment "IF prov:hadDictionaryMember(d1, e1, k1) and prov:hadDictionaryMember(d1, e2, k1) THEN e1 = e2"
  @rdfs:label "D3"
  rule key-single-entity [
    hadDictionaryMember(d, kp1) ^ pairKey(kp1, k) ^ pairEntity(kp1, e1) ^ hadDictionaryMember(d, kp2) ^ pairKey(kp2, k) ^ pairEntity(kp2, e2) ->
    sameAs(e1, e2)
  ]
}